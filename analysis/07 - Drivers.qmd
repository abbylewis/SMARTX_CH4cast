---
title: "Drivers"
format: html
editor: visual
---

This file plots model structure differences between treatments for ARIMA and Random Forest models.

## Load data and packages

```{r}
#Packages
library(tidyverse)
library(randomForest)

#Observation data
observations <- read_csv("../L1_target.csv", show_col_types = F) %>%
  mutate(datetime_observed = datetime,
         datetime = as.Date(paste(year(datetime), month(datetime), "01", sep = "-"))) %>%
  group_by(project_id, site_id, datetime, duration, variable) %>%
  summarize(observation = mean(observation, na.rm = T),
            dates_observed = list(unique(datetime_observed)),
            .groups = "drop")

#Metadata
metadata <- read_csv(here::here("Raw_data", "plot_treatments.csv"), show_col_types = F) %>%
  mutate(Type = "Separate")

#Met drivers
noaa_past_mean <- read_csv(here::here("met_downloads",
                                      "monthly_forecasts.csv"),
                             show_col_types = F) %>%
  filter(horizon == 1) %>%
  group_by(datetime, variable) %>%
  summarize(prediction = mean(prediction, na.rm = T), .groups = "drop") %>%
  pivot_wider(names_from = "variable", values_from = "prediction")
```

## Random forest

```{r}
importance_df <- function(rf_output){
  out <- data.frame(importance(rf_output))
  out$name <- row.names(out)
  return(out)
}

png("../figures/Figure S2 - RF_drivers.png", res = 300, width = 5, height = 3, units = "in")
observations %>%
  left_join(noaa_past_mean) %>%
  mutate(site_id = as.numeric(site_id)) %>%
  left_join(metadata, by = c("site_id" = "Plot")) %>%
  filter(CO2Treat == "Amb") %>%
  mutate(Transect = as.factor(ifelse(Transect > 3, Transect - 3, Transect)),
         Veg = case_match(Veg,
                          "C3" ~ "C[3]",
                          "C4" ~ "C[4]"),
         Temp = paste0("''+", Temp, "~degree~C")) %>%
  group_by(Veg, Temp, site_id, Transect) %>%
  reframe(importance_df(randomForest::randomForest(observation ~ 
                                        Temp_K * 
                                        SolarRad_Wm2 * 
                                        PrecipRate_ms *
                                        WindSpeed_ms *
                                        Pressure_Pa,
                                        importance = T))) %>%
  mutate(name = case_match(name,
                           "Temp_K" ~ "Air temperature",
                           "SolarRad_Wm2" ~ "Solar radiation",
                           "PrecipRate_ms" ~ "Precipitation",
                           "WindSpeed_ms" ~ "Wind speed",
                           "Pressure_Pa" ~ "Air pressure")) %>%
  ggplot(aes(x = X.IncMSE, y = name, shape = Transect))+
  geom_point()+
  ggh4x::facet_nested(Veg~Temp, labeller = label_parsed)+
  theme_bw(base_size = 10)+
  theme(strip.background = element_rect(fill = "white",
                                        color = "grey85"),
        legend.position = "bottom",
        axis.title.y = element_blank())+
  xlab("% increase in MSE omitting this covariate")
dev.off()
```

## ARIMA

```{r}
obs_arima = observations |>
    complete(datetime = seq.Date(from = min(datetime), 
                                 to = max(datetime),
                                 by = "month"), 
             site_id)

arima_df <- function(arima_output){
  out <- data.frame(t(arima_output$coef))
  return(out)
}

arima_res <- obs_arima %>%
  mutate(site_id = as.numeric(site_id)) %>%
  left_join(metadata, by = c("site_id" = "Plot")) %>%
  filter(CO2Treat == "Amb") %>%
  group_by(Veg, Temp, site_id, Transect) %>%
  reframe(arima_df(forecast::auto.arima(ts(observation, frequency = 12), D = 1))) 

png("../figures/Figure S3 - ARIMA_drivers.png", res = 300, width = 4, height = 6, units = "in")
arima_res %>%
  pivot_longer(sar1:drift) %>%
  mutate(#value = ifelse(is.na(value), 0, value),
         Temp = as.factor(Temp),
         Transect = as.factor(ifelse(Transect > 3, Transect - 3, Transect)),
         Veg = case_match(Veg,
                          "C3" ~ "C[3]",
                          "C4" ~ "C[4]"),
         Type = ifelse(grepl("s", name), "Seasonal", "Non-seasonal"),
         name = (sub("s", "", name))) %>%
  ggplot(aes(x = Temp, y = value, shape = Transect))+
  geom_hline(yintercept = 0, color = "grey70") +
  geom_point(alpha = 0.5)+
  ylab("Parameter value") +
  xlab("Temperature treatment (ÂºC above ambient)")+
  ggh4x::facet_nested(Type+name~Veg, scales = "free_y", independent = "y",
                     labeller  = label_parsed)+
  scale_y_continuous(expand = expansion(mult = c(.1, 0.1)))+
  theme_bw(base_size = 10)+
  theme(strip.background = element_rect(fill = "white",
                                        color = "grey85"),
        legend.position = "bottom")
dev.off()
```
